{"version":3,"sources":["components/DirectoryItems.js","components/Add.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["DirectoryItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createRow","bind","assertThisInitialized","item","_this2","react_default","a","createElement","key","name","number","className","onClick","delete","directoryEntries","entries","directoryItems","map","length","PureComponent","BackButton","react_router","render","_ref2","history","type","push","Add","addContact","e","preventDefault","newItem","state","Date","now","setState","prevState","items","concat","window","localStorage","setItem","JSON","stringify","handleNameChange","event","target","value","handleNumberChange","getItem","console","log","parse","Add_BackButton","onSubmit","htmlFor","onChange","AddButton","_ref","Home","deleteEntry","filteredItems","filter","home_AddButton","DirectoryItems_DirectoryItems","App","onNavigation","context","react_router_dom","basename","path","component","exact","Component","Boolean","location","hostname","match","clear","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c7c6cc5.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\n\nexport default class DirectoryItems extends PureComponent {\n  constructor(props){\n    super(props)\n\n    this.createRow = this.createRow.bind(this);\n  }\n  createRow(item){\n      return(\n          <tr key={item.key}>\n              <td>{item.name}</td>\n              <td>{item.number}</td>\n              <td><button className=\"d-button-delete\" onClick={() => this.delete(item.key)}>Delete</button></td>\n          </tr>\n      )\n  }\n\n  delete(key){\n    this.props.delete(key);\n  }\n    render() {\n        var directoryEntries = this.props.entries;\n        // console.log(directoryEntries);\n        var directoryItems = directoryEntries.map(this.createRow);\n    \n    if(directoryEntries.length === 0){\n        return (<div></div>)\n    }\n\n    return (\n      <div>\n          {/* {(directoryEntries.length === 0) ? 'yes' :'no'} */}\n        <table>\n            <thead>\n            <tr>\n                <th>Name</th>\n                <th>Number</th>\n                <th></th>\n\n            </tr>\n            </thead>\n            <tbody>\n            {directoryItems}\n            </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","// import import React from 'react'\nimport {\n\twithRouter\n} from 'react-router-dom';\nimport React, { PureComponent } from 'react'\nimport { Route} from \"react-router-dom\";\nimport DirectoryItems from './DirectoryItems';\nconst SubmitButton = () => (\n  <Route render={({ history}) => (\n    <button\n      className=\"d-form-submit\"\n      type='submit'\n      onClick={() => { history.push('/') }}\n    >\n      &#8678;\n    </button>\n  )} />\n)\n\nconst BackButton = () => (\n    <Route render={({ history}) => (\n      <button\n        className=\"d-back-button\"\n        type='button'\n        onClick={() => { history.push('/') }}\n      >\n        &#8678;\n      </button>\n    )} />\n)\nexport default class Add extends PureComponent {\n  constructor(props){\n    super(props)\n    if (localStorage.getItem(\"data\") === null) {\n      window.localStorage.setItem('data', JSON.stringify([]));\n      console.log(\"setting emplty\");\n    }\n    else{\n      console.log(\"already there\");\n      console.log(JSON.parse(window.localStorage.getItem('data')));\n      \n    }\n    this.state = {\n      name: \"\",\n      number: \"\",\n      items : JSON.parse(window.localStorage.getItem('data'))\n    }\n    // console.log(\"$$>>>\");\n    // console.log(this.state.items);\n    // console.log(window.localStorage.key(0));\n    // console.log(JSON.parse(window.localStorage.getItem('data')));\n    // console.log(\"$$<<<\");\n  }\n\n  addContact = (e) => {\n    e.preventDefault();\n    var newItem = {\n      name: this.state.name,\n      number: this.state.number,\n      key: Date.now()\n    };\n\n    \n    this.setState((prevState)=>{\n      return{\n        items: prevState.items.concat(newItem)\n      }\n    });\n\n    this.setState((prevState)=>{\n      window.localStorage.setItem('data', JSON.stringify(prevState.items));\n      this.props.history.push('/');\n    });\n  }\n  \n  \n  handleNameChange = (event) => {\n    this.setState({\n      name: event.target.value\n    })\n  }\n  handleNumberChange = (event) =>{\n    this.setState({\n      number: event.target.value\n    })\n  }\n  render() {\n    return (\n      <div className=\"d-add-main\">\n        <BackButton/>\n        <br/>\n        <form className=\"d-add-form\" onSubmit={this.addContact}>\n        <label htmlFor=\"name\">Name:</label>\n        <br/>\n        <input type=\"text\"\n          value={this.state.name}\n          onChange={this.handleNameChange}\n        />\n        <br/>\n\n        <label htmlFor=\"number\">Number:</label>\n        <br/>\n        <input type=\"text\"\n        value={this.state.number}\n        onChange={this.handleNumberChange}\n        />\n        <br/>\n        <h5>Subscriber to be added:</h5>\n        <div>Name: {this.state.name}</div>\n        <div>Number: {this.state.number}</div>\n        <button className=\"d-form-submit\" type=\"submit\">Add</button>\n        </form>\n        {/* <DirectoryItems entries={this.state.items}/> */}\n      </div>\n    )\n  }\n}\n\n//  withRouter(Add);\n","import React, { PureComponent } from 'react'\nimport { Route} from \"react-router-dom\";\nimport DirectoryItems from './DirectoryItems';\n\nconst AddButton = () => (\n    <Route render={({ history}) => (\n      <button className=\"d-add-button\"\n        type='button'\n        onClick={() => { history.push('/add') }}\n      >\n        +\n      </button>\n    )} />\n)\n\nexport default class Home extends PureComponent {\n    constructor(props){\n        super(props)\n        if (localStorage.getItem(\"data\") === null) {\n            window.localStorage.setItem('data', JSON.stringify([]));\n          }\n        this.state = {\n          items : JSON.parse(window.localStorage.getItem('data'))\n        }\n      }\n\n\n      deleteEntry= (key) =>{\n          var filteredItems = this.state.items.filter(function(item){\n              return(item.key !== key)\n          });\n        console.log(filteredItems);\n          this.setState({\n              items: filteredItems\n          })\n          this.setState((prevState)=>{\n            window.localStorage.setItem('data', JSON.stringify(prevState.items));\n            return{}\n          });\n\n          console.log(this.items);\n      }\n\n  render() {\n    return (\n      <div>\n        <AddButton/>\n        <DirectoryItems entries={this.state.items}\n                        delete={this.deleteEntry}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n// import { withRouter } from 'react-router'\n// import {Router } from \"react-router\"\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n// import {browserHistory} from 'react-router';\nimport Add from './components/Add';\nimport Home from './components/home';\n// import createHistory from 'history/createBrowserHistory'\n\nclass App extends Component {\n\nonNavigation = () => {\n  this.context.history.push(\"/add\");\n}\n\n  render() {\n    return (\n      <div className=\"d-main\">\n\n      <Router basename=\"/phone-directory-reactjs\">\n        \n          <Route path=\"/add\" component ={Add}/>\n          <Route path=\"/\" exact={true} component ={Home}/>\n      </Router>\n      </div>\n        );\n  }\n}\n{/* <BrowserRouter basename=\"/phone-directory-reactjs\" /> */}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nlocalStorage.clear();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}